from agents.Agent import Agent
from data.EpisodePlotOutline import EpisodePlotOutline
from managers.ChromaDBManager import ChromaDBManager
from managers.OllamaClient import OllamaClient


import json
from typing import List


class PlotGeneratorAgent(Agent):
    """Агент, генерирующий сюжет по функциям Проппа."""
    def __init__(self, ollama_client: OllamaClient, chromadb_manager: ChromaDBManager):
        super().__init__("Генератор сюжета", "Мастер построения сёнэн-сюжетов, использующий типологию Проппа для создания последовательных и увлекательных арок.", ollama_client)
        self.chroma_db = chromadb_manager
        self.propp_functions = { # Выборочные функции Проппа для демонстрации
            "Исходная ситуация": "1. Исходная ситуация (Не является функцией, но важный элемент): Начальное описание героев и места действия, которое задаёт фон для последующих событий.",
            "Отлучка": "2. Отлучка (I. Отлучка, е): Один из членов семьи покидает дом, создавая условия для развития дальнейших событий.",
            "Запрет": "3. Запрет (II. Запрет, б): Герою даётся наказ или предупреждение, которое в дальнейшем может быть нарушено.",
            "Нарушение запрета": "4. Нарушение (III. Нарушение, b): Герой или другой персонаж нарушает ранее данный запрет или наказ.",
            "Вредительство или Недостача": "9. Вредительство (VIII. Вредительство, А) или Недостача (VIII-a. Недостача, a): Злодей наносит вред или ущерб одному из членов семьи, или же герою чего-либо не хватает, и он стремится это обрести.",
            "Посредничество": "10. Посредничество (IX. Посредничество, В): Беда или недостача сообщается герою, к нему обращаются с просьбой, или его отсылают в путь.",
            "Начинающееся противодействие": "11. Начинающееся противодействие (X. Начинающееся противодействие, С): Герой соглашается или решается на противодействие врагу или поиск того, чего не хватает.",
            "Отправка": "12. Отправка (XI. Отправка, ↑): Герой покидает дом, начиная своё путешествие или поиски.",
            "Первая функция дарителя": "13. 1-я функция дарителя (XII. 1-я функция дарителя, Д): Герой испытывается, выспрашивается или подвергается нападению, что подготавливает получение им волшебного средства.",
            "Реакция героя": "14. Реакция героя (XIII. Реакция героя, Г): Герой отвечает на действия будущего дарителя, что определяет дальнейший ход событий.",
            "Получение волшебного средства": "15. Получение волшебного средства (XIV. Снабжение, Z): Герой получает в своё распоряжение магический предмет или помощника.",
            "Борьба": "17. Борьба (XVI. Борьба, Б): Герой и антагонист вступают в непосредственное противостояние, которое может быть как физическим, так и состязательным.",
            "Победа": "19. Победа (XVIII. Победа, П): Антагонист побеждается героем.",
            "Ликвидация беды или недостачи": "20. Ликвидация беды или недостачи (XIX. Ликвидация беды или недостачи, Л): Начальная беда или недостача, из-за которой герой отправился в путь, устраняется.",
            "Возвращение": "21. Возвращение (XX. Возвращение, ↓): Герой возвращается в свой мир или место, откуда он начал свой путь.",
        }
        self.propp_sequence = list(self.propp_functions.keys())

    def process(self, chief_editor_vector: str, current_episode_idx: int, existing_plot: List[EpisodePlotOutline]) -> EpisodePlotOutline:
        """Генерирует следующий шаг сюжета по Проппу."""
        print(f"\n[{self.name}]: Генерирую следующий эпизод...")
        next_propp_function = self.propp_sequence[current_episode_idx % len(self.propp_sequence)]

        inspiration = self.chroma_db.query(f"Сёнэн сюжет, {next_propp_function}")[0]

        task = (
            f"Создай следующий эпизод сёнэн-сценария. "
            f"Текущий начальный вектор от главного редактора: '{chief_editor_vector}'. "
            f"Предыдущие этапы сюжета: {json.dumps([ep.dict() for ep in existing_plot], ensure_ascii=False, indent=2) if existing_plot else 'Нет предыдущих эпизодов.'}\n"
            f"Текущая функция Проппа для этого эпизода: '{next_propp_function}'. "
            f"Её определение: {self.propp_functions[next_propp_function]}. "
            "Описание события должно быть на русском языке. Убедись, что оно соответствует духу сёнэна: дружба, преодоление, рост героя."
        )
        prompt = self.generate_prompt(
            task_description=task,
            context="Цель - разработать последовательный сюжетный ход для сёнэн-манги, используя типологию Проппа.",
            inspiration=inspiration,
            format_schema=EpisodePlotOutline.model_json_schema()
        )
        response = self.client.chat(prompt, format_model=EpisodePlotOutline)
        print(f"Сгенерирован эпизод: {response.propp_function} - {response.description}")
        return response